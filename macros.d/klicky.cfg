# This macro was provided by discord user Garrettwp to whom i give my thanks for sharing it with me.
# The v1.8 version template was provided by Yeri, who helped to debug prior to release, thanks again.
# I have tweaked it a lot.
#
# this macro is  based on the great Annex magprobe dockable probe macros "#Originally developed by Mental, modified for better use on K-series printers by RyanG and Trails"
# that macro can be found here https://github.com/Annex-Engineering/Annex-Engineering_Other_Printer_Mods/blob/master/All_Printers/Microswitch_Probe/Klipper_Macros/dockable_probe_macros.cfg
#
# by standing on the shoulders of giants, lets see if we can see further

[gcode_macro User_Variables]
variable_verbose:               True  # Enable verbose output
variable_travel_speed:          200   # how fast all other travel moves will be performed when running these macros
variable_dock_speed:            50    # how fast should the toolhead move when docking the probe for the final movement
variable_release_speed:         100    # how fast should the toolhead move to release the hold of the magnets after docking					   
variable_z_drop_speed:          20    # how fast the z will lower when moving to the z location to clear the probe
variable_home_z_height:         15    # Z when homing

# if a separate Z endstop switch is in
# use, specify the coordinates of the switch here (Voron).
# Set to 0 to have the probe move to center of bed
variable_z_endstop_x:            301.5
variable_z_endstop_y:            305.5
#variable_z_endstop_x:            0
#variable_z_endstop_y:            0

# location to park the toolhead
variable_park_toolhead:         False  # Enable toolhead parking
variable_parkposition_x:        150
variable_parkposition_y:        305.5
variable_parkposition_z:        30

#dock location
variable_docklocation_x:        0  # X Dock position
variable_docklocation_y:        305.5   # Y Dock position
variable_docklocation_z:        15    # Z dock position
variable_dockarmslenght:        60    # Dock arms lenght, toolhead movement necessary to clear the dock arm

# Do not modify below
gcode:
    {% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
    {% set My = printer['configfile'].config["stepper_y"]["position_max"]|float %}
    {% set Ox = printer['configfile'].config["probe"]["x_offset"]|float %}
    {% set Oy = printer['configfile'].config["probe"]["y_offset"]|float %}
    {% set Oz = printer['configfile'].config["probe"]["z_offset"]|float %}

    # if docklocation_z is zero, use Home Z height for safety
    {% if docklocation_z == 0 %}
        SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=docklocation_z VALUE={ home_z_height }
    {% endif %}

    # If x, y coordinates are set for z endstop, assign them
    {% if z_endstop_x != 0 or z_endstop_y != 0 %}
        SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }
        SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }

    # if no x, y coordinates for z endstop, assume probe is endstop and move toolhead to center of bed
    {% else %}
        SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }
        SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }
    {% endif %}


[gcode_macro Probe_Variables]
variable_probe_attached:            False
variable_probe_state:               False
variable_probe_lock:                False
variable_z_endstop_x:               0
variable_z_endstop_y:               0
gcode:


[gcode_macro Homing_Variables]
gcode:
    {% set R  = params.RESET|default(0)  %}

     {% if R %}
        SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=probe_lock VALUE={ False }
   {% endif %}

# Attach probe and lock it
[gcode_macro Attach_Probe_Lock]
gcode:
    Attach_Probe
    SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=probe_lock VALUE={ True }

# Dock probe and lock it
[gcode_macro Dock_Probe_Unlock]
gcode:
    SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=probe_lock VALUE={ False }
    Dock_Probe

# Unlock Probe
[gcode_macro Probe_Unlock]
gcode:
    SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=probe_lock VALUE={ False }

# Lock Probe
[gcode_macro Probe_Lock]
gcode:
    SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=probe_lock VALUE={ True }

# Attach Probe Routine
[gcode_macro Attach_Probe]
gcode:
    # Get probe attach status
    {% set P = printer["gcode_macro Probe_Variables"].probe_attached %}
    {% set L = printer["gcode_macro Probe_Variables"].probe_lock %}
    {% set V = printer["gcode_macro User_Variables"].verbose %}
    # Get Docking location
    {% set Dx = printer["gcode_macro User_Variables"].docklocation_x %}
    {% set Dy = printer["gcode_macro User_Variables"].docklocation_y %}
    {% set Dz = printer["gcode_macro User_Variables"].docklocation_z %}
    {% set Da = printer["gcode_macro User_Variables"].dockarmslenght %}
    # Safe Z for travel
    {% set Hzh = printer["gcode_macro User_Variables"].home_z_height|float %}
    #Set speed
    {% set St = printer["gcode_macro User_Variables"].travel_speed * 60    %}

    M400 # mandatory to save the new safe position
    #allows the docking position to be independent of the Z offset, necessary for bed mounted probes
    SAVE_GCODE_STATE name=_attachProbe
    SET_GCODE_OFFSET Z=0

    # if x and y are not homed
    {% if not 'xy' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X and Y Axis First!") }

    # If probe not attached and locked
    {% elif not P and not L %}
        {% if V %}
            { action_respond_info("Attaching Probe") }
        {% endif %}
        G90

        {% if (not 'z' in printer.toolhead.homed_axes) %}
            {% if V %}
                { action_respond_info("Resetting Z position to zero") }
            {% endif %}
            SET_KINEMATIC_POSITION Z=0
        {% endif %}

        {% if (printer.toolhead.position.z < Hzh) %}
            G1 Z{Hzh} F1200
        {% endif %}													 
	    #Umbilical_Path													 

        # Probe entry location
        G1 X{Dx} Y{Dy|int - Da|int} F{St}
        # pickup from Probe location
        G1 X{Dx} Y{Dy} F1800
        # Probe entry location
        G1 X{Dx} Y{Dy|int - Da|int} F6000

        Park_Toolhead

        CheckProbe action=attach

        {% elif L %}
            {% if V %}
                { action_respond_info("Probe locked!") }
            {% endif %}

            # Probe attached, do nothing
            CheckProbe action=query

        {% else %}
            {% if V %}
                { action_respond_info("Probe already attached!") }
            {% endif %}
        {% endif %}

        # Probe attached, do nothing
        CheckProbe action=query	
					   					 
	#reverts to the original Z offset
        RESTORE_GCODE_STATE name=_attachProbe
					   					 
# Dock Probe Routine
[gcode_macro Dock_Probe]
gcode:
    # Get probe attach status
    {% set P = printer["gcode_macro Probe_Variables"].probe_attached %}
    {% set L = printer["gcode_macro Probe_Variables"].probe_lock %}
    {% set V = printer["gcode_macro User_Variables"].verbose %}
    # Get Docking location
    {% set Dx = printer["gcode_macro User_Variables"].docklocation_x %}
    {% set Dy = printer["gcode_macro User_Variables"].docklocation_y %}
    {% set Dz = printer["gcode_macro User_Variables"].docklocation_z %}
    {% set Da = printer["gcode_macro User_Variables"].dockarmslenght %}
    # Safe Z for travel
    {% set Hzh = printer["gcode_macro User_Variables"].home_z_height|float %}
    # Set speed
    {% set St = printer["gcode_macro User_Variables"].travel_speed * 60    %}
    {% set Sd = printer["gcode_macro User_Variables"].dock_speed * 60      %}
    {% set Sr = printer["gcode_macro User_Variables"].release_speed * 60   %}
    {% set Sz = printer["gcode_macro User_Variables"].z_drop_speed * 60    %}
	
    M400 # mandatory to save the new safe position
    #allows the docking position to be independent of the Z offset, necessary for bed mounted probes
    SAVE_GCODE_STATE name=_dockProbe
    SET_GCODE_OFFSET Z=0

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }

    # If probe not attached and not locked
    {% elif P and not L %}
        {% if V %}
            { action_respond_info("Docking Probe") }
        {% endif %}
        G90

        {% if (printer.toolhead.position.z < Hzh) %}
            G1 Z{Hzh} F{Sz}
        {% endif %}

        #Umbilical_Path
		
        # Probe entry location
        G1 X{Dx} Y{Dy|int - Da|int} F{St}
        # Drop Probe to Probe location
        G1 X{Dx} Y{Dy} F{Sd}
        # Probe decoupling
        G1 X{Dx|int + 40} Y{Dy} F{Sr}
        G1 X{Dx|int + 40} Y{Dy|int - 40} F{St}

        Park_Toolhead

        CheckProbe action=dock

        {% elif L %}
            {% if V %}
                { action_respond_info("Probe locked!") }
            {% endif %}

            # Probe docked, do nothing
	    CheckProbe action=query					   

        {% else %}
            {% if V %}
                { action_respond_info("Probe already docked!") }
            {% endif %}
        # Probe docked, do nothing
        CheckProbe action=query								  
    {% endif %}
    #reverts to the original Z offset
    RESTORE_GCODE_STATE name=_dockProbe								 
									   
# Z Tilt Adjust
[gcode_macro Z_TILT_ADJUST]
rename_existing:             _Z_TILT_ADJUST
gcode:
   M117 Tilt adjust...
   status_leveling
   {% set V = printer["gcode_macro User_Variables"].verbose %}
   {% if V %}
       { action_respond_info("Z Tilt Adjust") }
   {% endif %}

   CheckProbe action=query
   Attach_Probe

   _Z_TILT_ADJUST {% for p in params
         %}{'%s=%s ' % (p, params[p])}{%
        endfor %}
   Dock_Probe
   G28 Z0
   status_ready
   M117
   


# Z Tilt Adjust
#[gcode_macro Z_TILT_ADJUST]
#rename_existing:             _Z_TILT_ADJUST
#gcode:
    ##M117 Tilt adjust..
    #_CG28 RESET_SETTINGS=false
    # reduce accel current
    #_SET_ACC VAL=HOME
    #_SET_Z_CURRENT VAL=HOME
    ##{% set V = printer["gcode_macro User_Variables"].verbose %}
    ##{% if V %}
        ##{ action_respond_info("Z Tilt Adjust") }
    ##{% endif %}

    ##CheckProbe action=query
    ##ATTACH_PROBE

    ##_Z_TILT_ADJUST {% for p in params
          ##%}{'%s=%s' % (p, params[p])}{%
          ##endfor %}
    ##G28
    ##M117 Auto Z-calibration..
    # ability to disable z calibration - it's done later in PRINT_START
    ##{% if params.CALIBRATE|default('true') == 'true' %}
      ##CALIBRATE_Z RESET_SETTINGS=false
    ##{% else %}
      ##DOCK_PROBE
    ##{% endif %}
    ## reset accel current
    #{% if params.RESET_SETTINGS|default('true') == 'true' %}
    #  _SET_Z_CURRENT
    #  _SET_ACC
    #{% endif %}

# Screws Tilt Adjust
#[gcode_macro SCREWS_TILT_CALCULATE]
#rename_existing:             _SCREWS_TILT_CALCULATE
#gcode:
   #{% set V = printer["gcode_macro User_Variables"].verbose %}
   #{% if V %}
       #{ action_respond_info("Screws Tilt Adjust") }
   #{% endif %}

   #CheckProbe action=query
  #Attach_Probe

   #_SCREWS_TILT_CALCULATE {% for p in params
         #%}{'%s=%s ' % (p, params[p])}{%
        #endfor %}

   #Dock_Probe

# Bed Mesh Calibrate
[gcode_macro BED_MESH_CALIBRATE]
rename_existing:             _BED_MESH_CALIBRATE
gcode:
    M117 Calibrating Bed Mesh...
    status_meshing
    {% set V = printer["gcode_macro User_Variables"].verbose %}
    {% if V %}
        { action_respond_info("Bed Mesh Calibrate") }
    {% endif %}

    CheckProbe action=query
    Attach_Probe

    _BED_MESH_CALIBRATE {% for p in params
           %}{'%s=%s ' % (p, params[p])}{%
          endfor %}

    Dock_Probe
    M117
    status_ready


# Probe Calibrate
[gcode_macro PROBE_CALIBRATE]
rename_existing:             _PROBE_CALIBRATE
gcode:
   {% set Hzh = printer["gcode_macro User_Variables"].home_z_height|float %}
    {% set Sz = printer["gcode_macro User_Variables"].z_drop_speed * 60 %}
    {% set St = printer["gcode_macro User_Variables"].travel_speed %}

    # Go to Z safe distance before saving location in order to
    # avoid crashing the probe on the bed when coming back
    G1 Z{Hzh} F{Sz}
    M400 # mandatory to save the new safe position
    SAVE_GCODE_STATE NAME=_original_nozzle_location
    
    CheckProbe action=query
    Attach_Probe

    # Restore nozzle location to probe the right place
    RESTORE_GCODE_STATE NAME=_original_nozzle_location MOVE=1 MOVE_SPEED={St}
    
    _PROBE_CALIBRATE {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
           endfor %}

    #Dock_Probe
    # Restore nozzle location again at the end
    #RESTORE_GCODE_STATE NAME=_original_nozzle_location MOVE=1 MOVE_SPEED={St}
	
# Probe Accuracy
[gcode_macro PROBE_ACCURACY]
rename_existing:             _PROBE_ACCURACY
gcode:
    {% set Hzh = printer["gcode_macro User_Variables"].home_z_height|float %}
    {% set Sz = printer["gcode_macro User_Variables"].z_drop_speed * 60 %}
    {% set St = printer["gcode_macro User_Variables"].travel_speed %}

    # Go to Z safe distance before saving location in order to
    # avoid crashing the probe on the bed when coming back
    G1 Z{Hzh} F{Sz}
    M400 # mandatory to save the new safe position
    SAVE_GCODE_STATE NAME=_original_nozzle_location

    CheckProbe action=query
    Attach_Probe

    # Restore nozzle location to probe the right place
    RESTORE_GCODE_STATE NAME=_original_nozzle_location MOVE=1 MOVE_SPEED={St}

    _PROBE_ACCURACY {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
           endfor %}

	#store current nozzle location
	SAVE_GCODE_STATE NAME=_original_nozzle_location 
	
	Dock_Probe
    # Restore nozzle location again at the end
    RESTORE_GCODE_STATE NAME=_original_nozzle_location MOVE=1 MOVE_SPEED={St}


# enable to SET_KINEMATIC_POSITION for Z hop
[force_move]
enable_force_move: True

# Home Z Routine
[gcode_macro Home_Z]
gcode:
    {% set Zx = printer["gcode_macro Probe_Variables"].z_endstop_x         %}
    {% set Zy = printer["gcode_macro Probe_Variables"].z_endstop_y         %}
    {% set Hzh = printer["gcode_macro User_Variables"].home_z_height|float %}
    {% set St = printer["gcode_macro User_Variables"].travel_speed * 60    %}
    {% set Sz = printer["gcode_macro User_Variables"].z_drop_speed * 60    %}
																			 
																			 

    # if x and y are not homed yet, raise error
    {% if not 'xy' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X and Y Axis First!") }

    {% else %}
        {% if (not 'z' in printer.toolhead.homed_axes) %}
            {% if V %}
                { action_respond_info("Resetting Z position to zero") }
            {% endif %}
            SET_KINEMATIC_POSITION Z=0
        {% endif %}

        # move tool to safe homing position and home Z axis
        # location of z endstop
        G90
		G1 X{Zx} Y{Zy} Z{Hzh} F{St}						
        G28 Z0
        G1 Z{Hzh} F{Sz}

    {% endif %}


# check to see if probe is where it is supposed to be after
# attaching/docking maneuver and set homing error or shutdown
[gcode_macro CheckProbe]
variable_probe_state:           0
gcode:
    Query_Probe
    SetProbeState action={ ACTION }


# due to how templates are evaluated, we have query endstops in one
# macro and call another macro to make decisions based on the result
[gcode_macro SetProbeState]
gcode:
    {% set P = printer.probe.last_query %}
    {% set V = printer["gcode_macro User_Variables"].verbose %}

    # If triggered (true), probe not attached
    {% if P %}
        SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=probe_attached VALUE={ False }

    # If not triggered (false), probe attached
    {% else %}
        SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=probe_attached VALUE={ True }
    {% endif %}

    {% if params.ACTION == 'query' %}
          SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=probe_state VALUE={ P }
    {% endif %}

    # if probe fails to attach/detach
    # if not docked
    {% if (not P and params.ACTION == 'dock') %}
        { action_raise_error("Probe dock failed!") }
    {% endif %}

    # if not attached
    {% if P and params.ACTION == 'attach' %}
        { action_raise_error("Probe attach failed!") }
    {% endif %}

# Override M84 to reset homing state if motors are disabled.
[gcode_macro M84]
rename_existing:             M84.1
gcode:
    Homing_Variables reset=1
    M84.1


# Override M18 to reset homing state if motors are disabled.
[gcode_macro M18]
rename_existing:             M18.1
gcode:
    Homing_Variables reset=1
    M18.1


# Park Toolhead Routine
[gcode_macro Park_Toolhead]
gcode:
    {% set P = printer["gcode_macro User_Variables"].park_toolhead %}
    {% set Px = printer["gcode_macro User_Variables"].parkposition_x %}
    {% set Py = printer["gcode_macro User_Variables"].parkposition_y %}
    {% set Pz = printer["gcode_macro User_Variables"].parkposition_z %}
    {% set St = printer["gcode_macro User_Variables"].travel_speed * 60 %}
    {% set H = printer["gcode_macro Homing_Variables"].homing %}
    {% set Hx = printer["gcode_macro Homing_Variables"].homed_x %}
    {% set Hy = printer["gcode_macro Homing_Variables"].homed_y %}
    {% set Hz = printer["gcode_macro Homing_Variables"].homed_z %}
    {% set V = printer["gcode_macro User_Variables"].verbose %}

    {% if (P and Hx and Hy and Hz) %}
        {% if V %}
            { action_respond_info("Parking Toolhead") }
        {% endif %}
        G90
        G1 X{Px} Y{Py} Z{Pz} F{St}
    {% endif %}